name: CI / CD for PDFManager

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '.github/**'
  workflow_dispatch:

# Add permissions for the entire workflow
permissions:
  contents: write
  packages: read
  
jobs:

  build-exe:
    name: Build Windows Executable
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        id: cache-pip
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            - ${{ runner.os }}-pip-

      - name: Cache PyInstaller output
        uses: actions/cache@v4
        id: cache-pyi
        with:
          path: |
            build/
            dist/
          key: ${{ runner.os }}-pyinstaller-${{ hashFiles('src/**','requirements.txt') }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Download and extract tools
        if: steps.cache-pyi.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # ImageMagick
          curl -sL "https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-47-portable-Q16-x64.zip" -o imagick.zip
          Expand-Archive imagick.zip -DestinationPath imagick_portable_64 -Force
          $exe = Get-ChildItem imagick_portable_64 -Recurse -Filter magick.exe | Select-Object -First 1
          Copy-Item $exe.FullName -Destination imagick_portable_64\magick.exe -Force

          # Poppler
          curl -sL "https://github.com/oschwartz10612/poppler-windows/releases/download/v24.02.0-0/Release-24.02.0-0.zip" -o poppler.zip
          Expand-Archive poppler.zip -DestinationPath poppler_portable_64 -Force
          New-Item -ItemType Directory -Path poppler_portable_64\library\bin -Force
          foreach ($tool in 'pdftoppm.exe','pdftocairo.exe') {
            $f = Get-ChildItem poppler_portable_64 -Recurse -Filter $tool | Select-Object -First 1
            Copy-Item $f.FullName -Destination poppler_portable_64\library\bin\$tool -Force
          }

      - name: Build executable
        if: steps.cache-pyi.outputs.cache-hit != 'true'
        run: python build_tools/build_with_pyinstaller.py --windowed

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PDFManager-artifacts
          path: |
            build/
            dist/
            imagick_portable_64/
            poppler_portable_64/

  package-installer:
    name: Create Windows Installer
    needs: build-exe
    runs-on: windows-latest
    # Add permissions for this job specifically
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: PDFManager-artifacts
          path: .
      - name: Install Inno Setup
        run: choco install innosetup -y --no-progress
      - name: Build installer
        working-directory: build_tools
        run: iscc PDFManager_PyInstaller_Setup.iss
      - name: Upload installer to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: PDFManager-installer
          path: installer_64/**/*.exe
          
      - name: Get Version Info
        id: version
        shell: bash
        run: |
          VERSION=$(grep 'MyAppVersion' build_tools/PDFManager_PyInstaller_Setup.iss | head -1 | grep -o '".*"' | tr -d '"')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          DATE=$(date +'%Y-%m-%d')
          echo "date=$DATE" >> $GITHUB_OUTPUT
          
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: PDF Manager v${{ steps.version.outputs.version }} (${{ steps.version.outputs.date }})
          draft: false
          prerelease: false
          generate_release_notes: true
          files: installer_64/*.exe
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Post Release Info
        run: |
          echo "Release created successfully!"
          echo "Release URL: ${{ steps.create_release.outputs.url }}"
          echo "Download the installer from the Releases page: https://github.com/${{ github.repository }}/releases/latest"
