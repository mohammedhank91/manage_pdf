name: Build Windows Installer

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r build_tools/requirements.txt
          pip install pyinstaller==6.3.0
      
      - name: Download ImageMagick Portable
        run: |
          Invoke-WebRequest -Uri "https://imagemagick.org/archive/binaries/ImageMagick-7.1.1-47-portable-Q16-x64.zip" -OutFile "imagemagick.zip"
          Expand-Archive -Path "imagemagick.zip" -DestinationPath "imagick_portable_64" -Force
          Get-ChildItem -Path "imagick_portable_64" -Recurse | Select-Object -First 10
      
      - name: Download Poppler
        run: |
          Invoke-WebRequest -Uri "https://github.com/oschwartz10612/poppler-windows/releases/download/v24.02.0-0/Release-24.02.0-0.zip" -OutFile "poppler.zip"
          New-Item -Path "poppler_portable_64" -ItemType Directory -Force
          Expand-Archive -Path "poppler.zip" -DestinationPath "poppler_portable_64" -Force
          Get-ChildItem -Path "poppler_portable_64" -Recurse | Select-Object -First 10
      
      - name: Download InnoSetup
        run: |
          Invoke-WebRequest -Uri "https://jrsoftware.org/download.php/is.exe" -OutFile "is.exe"
          Start-Process -FilePath ".\is.exe" -ArgumentList "/VERYSILENT /SUPPRESSMSGBOXES /NORESTART /SP-" -Wait
      
      - name: Create directories
        run: |
          New-Item -Path "dist" -ItemType Directory -Force
          New-Item -Path "build" -ItemType Directory -Force
          New-Item -Path "installer_64" -ItemType Directory -Force
          New-Item -Path "temp" -ItemType Directory -Force
      
      - name: Create LICENSE file if missing
        run: |
          if (-not (Test-Path -Path "LICENSE.txt")) {
            $license = "MIT License`n`nCopyright (c) 2024 PDF Manager`n`nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:`n`nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.`n`nTHE SOFTWARE IS PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
            Set-Content -Path "LICENSE.txt" -Value $license -Encoding UTF8
          }
      
      - name: Create build script
        run: |
          $scriptContent = @'
import os
import sys
import subprocess
from pathlib import Path

# Get paths
project_root = Path.cwd()
script_path = project_root / "src" / "pdf_manage.py"
icon_path = project_root / "src" / "resources" / "manage_pdf.ico"
imagick_dir = project_root / "imagick_portable_64"
poppler_dir = project_root / "poppler_portable_64"

print(f"Building executable with PyInstaller...")
print(f"Script path: {script_path}")
print(f"Icon path: {icon_path}")

# Create PyInstaller command
cmd = [
    sys.executable,
    "-m",
    "PyInstaller",
    "--name=PDFManager",
    "--clean",
    "--windowed",
    f"--icon={icon_path}",
    "--noconfirm",
    "--onedir",
    "--hidden-import=PyQt6",
    "--hidden-import=PyQt6.QtCore",
    "--hidden-import=PyQt6.QtGui",
    "--hidden-import=PyQt6.QtWidgets",
    "--hidden-import=PIL",
    "--hidden-import=PyPDF2",
    "--hidden-import=pikepdf",
    "--hidden-import=pdf2image",
]

# Add data files
if imagick_dir.exists():
    cmd.append(f"--add-data={imagick_dir};imagick_portable_64")
if poppler_dir.exists():
    cmd.append(f"--add-data={poppler_dir};poppler_portable_64")

# Add script path
cmd.append(str(script_path))

# Execute PyInstaller
print("Running command: " + " ".join(cmd))
subprocess.call(cmd)

# Create temp directory in dist
dist_dir = project_root / "dist" / "PDFManager"
temp_dir = dist_dir / "temp"
if not temp_dir.exists():
    os.makedirs(temp_dir, exist_ok=True)
    print(f"Created temp directory: {temp_dir}")

# Copy readme
with open(temp_dir / "readme.txt", "w") as f:
    f.write("Temporary files directory for PDF Manager")
'@
          Set-Content -Path "build_script.py" -Value $scriptContent -Encoding UTF8
      
      - name: Build with PyInstaller
        run: |
          # Run the build script
          python build_script.py
          
          # Verify build output
          if (Test-Path -Path "dist/PDFManager") {
            Write-Host "Build successful, listing contents:"
            Get-ChildItem -Path "dist/PDFManager" -Recurse | Select-Object -First 20
          } else {
            Write-Host "Error: Build directory not found"
          }
      
      - name: Create installer with InnoSetup
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" "build_tools\PDFManager_PyInstaller_Setup.iss"
      
      - name: Upload installer
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: installer_64/*.exe 